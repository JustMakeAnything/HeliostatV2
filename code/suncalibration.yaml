# Calibrate the heliostat according to a sun sensor
globals:
  # for the mirror moving
  - id: measuresun
    type: boolean
    restore_value: no
    initial_value: "false"
  - id: measuresuncount
    type: int
    restore_value: no
    initial_value: "0"
  # For the measurements
  - id: measurementscount
    type: int
    restore_value: no
    initial_value: "0"
  # Maximum 20 measurements
  - id: measurements
    type: int[20][5]
    restore_value: no
    #initial_value: 

sensor:
  - platform: template
    name: "sunmeasel"
    id: "sunmeasel"

  - platform: template
    name: "sunmeasaz"
    id: "sunmeasaz"

switch:
  - platform: template
    name: "Target the sun"
    id: targetSun
    optimistic: true
    turn_on_action:
      - globals.set:
          id: measuresun
          value: "true"
      - globals.set:
          id: measuresuncount
          value: '-40' # Some time to go to start (this value*interval should be abount 10s)
      - lambda: |-
            ESP_LOGI("measure", "begin of sunsearch");      
            id(stepper_el).set_sleep_when_done(false);
            id(stepper_az).set_sleep_when_done(false);


    turn_off_action:
      - globals.set:
          id: measuresun
          value: "false"
      - lambda: |-
            // Move mirror to a microstepfree position
            ESP_LOGI("measure", "end of sunsearch");
            id(updatemirror).execute();
            id(stepper_el).set_sleep_when_done(true);
            id(stepper_az).set_sleep_when_done(true);

button:
  - platform: template
    name: "calculateBoundary"
    id: calculateboundary
    on_press:
      - lambda: calculatenewbounds();

interval:
  - interval: 250ms
    then:
      - lambda: |-
          measurethesun();

# TODO: Check origin calibration every... and log result
globals:
  - id: minElevation
    type: float
    restore_value: no
    initial_value: ${MinElevation}
  - id: maxElevation
    type: float
    restore_value: no
    initial_value: ${MaxElevation}
  - id: minAzimuth
    type: float
    restore_value: no
    initial_value: ${MinAzimuth}
  - id: maxAzimuth
    type: float
    restore_value: no
    initial_value: ${MaxAzimuth}
  - id: motorel_prev
    type: float
    restore_value: no

stepper:
  - platform: a4988
    id: stepper_el
    step_pin: GPIO27
    dir_pin: GPIO12
    max_speed: 300 steps/s
    sleep_pin:
      number: GPIO26
      inverted: true    
    acceleration: 80 steps/s^2
    deceleration: 120 steps/s^2
    sleep_when_done: true

  - platform: a4988
    id: stepper_az
    step_pin: GPIO33
    dir_pin: GPIO25
    max_speed: 400 steps/s
    sleep_pin: 
      number: GPIO32
      inverted: true
    acceleration: 80 steps/s^2
    deceleration: 150 steps/s^2
    sleep_when_done: true


sensor:
  - platform: template
    name: "Motor Elevation"
    id: "motorel"

  - platform: template
    name: "Motor Azimuth"
    id: "motoraz"


script:
  # Update mirror position
  - id: updatemirror
    then:
      - lambda: |-
          if( id(calibration_left) || id(calibration_right) || id(calibration_up) || id(calibration_down) ){
            // No update of the mirror when calibration is running
            return;
          }
          auto setMotor = [](float &motorPos,float &min,float &max,float limit){
            if(motorPos<0){
              motorPos += 360.0f;
            }              
            motorPos = (motorPos - min) / (max-min) * limit;
            ESP_LOGI("calculation", "Motor Stepper: %f",motorPos);
            //ESP_LOGI("calculation", "MinAzimuth Stepper: %f",id(minAzimuth));
            //ESP_LOGI("calculation", "MaxAzimuth Stepper: %f",id(maxAzimuth));
            //ESP_LOGI("calculation", "Right Limit: %d",id(right_limit));
            if(motorPos > 0 && motorPos < limit){
              return (int)motorPos;
            }
            return -1;
          };
          auto toMicrostep = [](int motorPos){
            int motorValue = motorPos / ${Microsteps};
            return motorValue * ${Microsteps};
          };
          //
          // Execution when both values are in range, otherwise do nothing
          //
          // When elevation goes downwards, there is some clearance in the gears
          // Fix this by subtracting a fixed value from the elevation
          // 
          static float motorel_act;
          motorel_act = id(motorel).state;
          float motorel_corr = motorel_act;
          if(motorel_act<id(motorel_prev)){
            // Going down
            motorel_corr -= 0.9;
          }
          // Keep this motorel for the next call when it changed due to call to 'calculatetarget'
          id(motorel_prev)= id(motorel).state;
          //
          int targetEl = setMotor(motorel_corr,id(minElevation),id(maxElevation),(float)id(upper_limit));
          int targetAz = setMotor(id(motoraz).state,id(minAzimuth),  id(maxAzimuth),  (float)id(right_limit));
          if(targetEl!=-1 && targetAz !=-1){
            if (id(targetTheSun)){
              id(stepper_el).set_target(targetEl);
              id(stepper_az).set_target(targetAz);
            } else {
              id(stepper_el).set_target(toMicrostep(targetEl));
              id(stepper_az).set_target(toMicrostep(targetAz));
            }
          }

